-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.categoriae (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  type text NOT NULL,
  icon text,
  color text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  budget numeric,
  domus_id uuid NOT NULL,
  CONSTRAINT categoriae_pkey PRIMARY KEY (id),
  CONSTRAINT categoriae_domus_id_fkey FOREIGN KEY (domus_id) REFERENCES public.domus(id)
);
CREATE TABLE public.domus (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  owner_id uuid NOT NULL,
  name text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT domus_pkey PRIMARY KEY (id),
  CONSTRAINT domus_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES auth.users(id)
);
CREATE TABLE public.domus_invitationes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  domus_id uuid NOT NULL,
  inviter_id uuid NOT NULL,
  invitee_email text NOT NULL,
  status text NOT NULL DEFAULT 'pending'::text,
  token uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT domus_invitationes_pkey PRIMARY KEY (id),
  CONSTRAINT domus_invitationes_domus_id_fkey FOREIGN KEY (domus_id) REFERENCES public.domus(id),
  CONSTRAINT domus_invitationes_inviter_id_fkey FOREIGN KEY (inviter_id) REFERENCES auth.users(id)
);
CREATE TABLE public.domus_membra (
  domus_id uuid NOT NULL,
  user_id uuid NOT NULL,
  role text NOT NULL DEFAULT 'member'::text,
  joined_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT domus_membra_pkey PRIMARY KEY (domus_id, user_id),
  CONSTRAINT domus_membra_domus_id_fkey FOREIGN KEY (domus_id) REFERENCES public.domus(id),
  CONSTRAINT domus_membra_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.expenses (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  description text NOT NULL,
  amount numeric NOT NULL,
  category text,
  date date NOT NULL DEFAULT CURRENT_DATE,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  category_id uuid,
  CONSTRAINT expenses_pkey PRIMARY KEY (id),
  CONSTRAINT expenses_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT expenses_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categoriae(id)
);
CREATE TABLE public.incomes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  description text NOT NULL,
  amount numeric NOT NULL,
  category text,
  date date NOT NULL DEFAULT CURRENT_DATE,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  category_id uuid,
  CONSTRAINT incomes_pkey PRIMARY KEY (id),
  CONSTRAINT incomes_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT incomes_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categoriae(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  full_name text,
  avatar_url text,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.tarefa_categorias (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  domus_id uuid NOT NULL,
  nome text NOT NULL,
  cor text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT tarefa_categorias_pkey PRIMARY KEY (id),
  CONSTRAINT tarefa_categorias_domus_id_fkey FOREIGN KEY (domus_id) REFERENCES public.domus(id)
);
CREATE TABLE public.tarefa_tags (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  domus_id uuid NOT NULL,
  nome text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT tarefa_tags_pkey PRIMARY KEY (id),
  CONSTRAINT tarefa_tags_domus_id_fkey FOREIGN KEY (domus_id) REFERENCES public.domus(id)
);
CREATE TABLE public.tarefa_tem_tags (
  tarefa_id uuid NOT NULL,
  tag_id uuid NOT NULL,
  CONSTRAINT tarefa_tem_tags_pkey PRIMARY KEY (tarefa_id, tag_id),
  CONSTRAINT tarefa_tem_tags_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES public.tarefa_tags(id),
  CONSTRAINT tarefa_tem_tags_tarefa_id_fkey FOREIGN KEY (tarefa_id) REFERENCES public.tarefas(id)
);
CREATE TABLE public.tarefas (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  domus_id uuid NOT NULL,
  nome text NOT NULL,
  descricao text,
  observacoes text,
  categoria_id uuid,
  criador_id uuid NOT NULL,
  atribuido_a_id uuid,
  deadline date,
  data_marcada date,
  estado USER-DEFINED NOT NULL DEFAULT 'A Fazer'::task_status,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT tarefas_pkey PRIMARY KEY (id),
  CONSTRAINT tarefas_criador_id_fkey FOREIGN KEY (criador_id) REFERENCES public.profiles(id),
  CONSTRAINT tarefas_atribuido_a_id_fkey FOREIGN KEY (atribuido_a_id) REFERENCES public.profiles(id),
  CONSTRAINT tarefas_categoria_id_fkey FOREIGN KEY (categoria_id) REFERENCES public.tarefa_categorias(id),
  CONSTRAINT tarefas_domus_id_fkey FOREIGN KEY (domus_id) REFERENCES public.domus(id)
);
CREATE TABLE public.transactiones_recurrentes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  description text NOT NULL,
  amount numeric NOT NULL,
  category_id uuid,
  type text NOT NULL CHECK (type = ANY (ARRAY['expense'::text, 'income'::text])),
  frequency text NOT NULL CHECK (frequency = ANY (ARRAY['weekly'::text, 'monthly'::text, 'yearly'::text])),
  day_of_month smallint CHECK (day_of_month >= 1 AND day_of_month <= 31),
  day_of_week smallint CHECK (day_of_week >= 1 AND day_of_week <= 7),
  start_date date NOT NULL,
  end_date date,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  domus_id uuid NOT NULL,
  CONSTRAINT transactiones_recurrentes_pkey PRIMARY KEY (id),
  CONSTRAINT recurring_transactions_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categoriae(id),
  CONSTRAINT transactiones_recurrentes_domus_id_fkey FOREIGN KEY (domus_id) REFERENCES public.domus(id)
);